---
import { Image } from 'astro:assets'

const { artist, number, playlistId } = Astro.props
---

<a href={`/playlist/${playlistId}/artist/${artist.name.toLowerCase()}`}>
	<article class='flex flex-col items-center justify-between gap-3'>
		<div
			class='inline-block'
			transition:name={`artist-number-${artist.name.toLowerCase()}`}
		>
			<div class='relative inline-block'>
				<p class='text-xl font-bold tracking-tight text-white'>{number}</p>
				<div class='absolute -bottom-1 left-0 flex w-full justify-center'>
					<span class='h-1 w-3/4 rounded-b-full bg-[#42C83C]'></span>
				</div>
			</div>
		</div>
		<div
			class='poster relative aspect-[145/185] w-full min-w-36 cursor-pointer rounded-[30px]'
		>
			<Image
				src={artist.imageUrl || '/billie.png'}
				alt={`Imagen de ${artist.name}`}
				width={145}
				height={185}
				loading={'eager'}
				class='absolute inset-0 h-full w-full rounded-[30px] object-cover'
				transition:name={`artist-image-${artist.name.toLowerCase()}`}
			/>
		</div>
		<div class='flex flex-col gap-1 text-[#E1E1E1]'>
			<p
				class='text-base font-bold'
				transition:name={`artist-name-${artist.name.toLowerCase()}`}
			>
				{artist.name}
			</p>
			<p
				class='text-sm'
				transition:name={`artist-stats-${artist.name.toLowerCase()}`}
			>
				{parseFloat(artist.percentage).toFixed(2)}% | {artist.contentCount} songs
			</p>
		</div>
	</article>
</a>
<style>
	.poster {
		transition:
			box-shadow 0.1s,
			transform 0.1s;
		background-size: cover;
	}

	.poster:hover {
		box-shadow: 0 0 50px rgba(0, 0, 0, 1);
	}
</style>

<script>
	const elements = document.querySelectorAll(
		'.poster',
	) as NodeListOf<HTMLElement>

	elements.forEach(el => {
		const image = el.querySelector('img')
		const height = el.clientHeight
		const width = el.clientWidth

		el.addEventListener('mousemove', e => {
			const { layerX, layerY } = e

			const yRotation = ((layerX - width / 2) / width) * 20
			const xRotation = ((layerY - height / 2) / height) * 20

			const string = `
        perspective(500px)
        scale(1.1)
        rotateX(${xRotation}deg)
        rotateY(${yRotation}deg)
      `

			el.style.transform = string
			if (image) image.style.transform = 'scale(1.1)'
		})

		el.addEventListener('mouseout', () => {
			el.style.transform = `
        perspective(500px)
        scale(1)
        rotateX(0deg)
        rotateY(0deg)
      `
			if (image) image.style.transform = 'scale(1)'
		})
	})
</script>
