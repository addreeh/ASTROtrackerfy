---
import { Image } from 'astro:assets'
import fs from 'fs/promises'
import path from 'path'
import crypto from 'crypto'

interface Props {
	artist: {
		name: string
		imageUrl: string
	}
	className?: string
}

const { artist, className = '' } = Astro.props

const apiKeys = import.meta.env.PUBLIC_API_BG_KEYS?.split(',') || []

async function downloadAndValidateImage(url: string): Promise<boolean> {
	try {
		const response = await fetch(url, { method: 'HEAD' })
		const contentType = response.headers.get('content-type')
		return !!contentType && contentType.startsWith('image/')
	} catch {
		return false
	}
}

async function removeBackground(imageToRemove: string): Promise<string> {
	const url = 'https://background-removal.p.rapidapi.com/remove'
	let imageUrl = imageToRemove

	for (const apiKey of apiKeys) {
		const options = {
			method: 'POST',
			headers: {
				'content-type': 'application/x-www-form-urlencoded',
				'X-RapidAPI-Key': apiKey,
				'X-RapidAPI-Host': 'background-removal.p.rapidapi.com',
			},
			body: new URLSearchParams({
				image_url: imageToRemove,
				output_format: 'url',
				to_remove: 'background',
			}),
		}

		try {
			const response = await fetch(url, options)
			if (!response.ok) continue

			const result = await response.json()

			if (!result.error && result.response?.image_url) {
				imageUrl = result.response.image_url
				break
			}
		} catch (error) {
			console.error('API error:', error)
			// Continue to next API key
		}
	}

	return imageUrl
}

// Process the image URL with retries and timeout
const processImage = async () => {
	const timeout = new Promise<string>((_, reject) =>
		setTimeout(() => reject(new Error('Processing timeout')), 10000),
	)

	try {
		const result = await Promise.race([
			removeBackground(artist.imageUrl),
			timeout,
		])
		return result
	} catch (error) {
		console.error('Image processing failed:', error)
		return artist.imageUrl
	}
}

const processedImageUrl = await processImage();

const preloadImageUrl = processedImageUrl || artist.imageUrl;
// const processedImageUrl = artist.imageUrl
---

<!-- <link rel="preload" href={preloadImageUrl} as="image"> -->
<Image
	id='top-artist-image'
	src={processedImageUrl}
	alt={`Top Artist: ${artist.name}`}
	width={200}
	height={150}
	loading='eager'
	class={`absolute bottom-0 right-5 h-[11rem] ${className}`}
	transition:name={`artist-image-${artist.name.toLowerCase()}`}
/>
